Сервис анализатор погоды. Использует сторонний API https://rapidapi.com/weatherapi/api/weatherapi-com Приложение запрашивать погоду с заданной в настройках периодичностью по определенному городу.

Для корректной работы необходимы:
- java Oracle OpenJDK version "18.0.2"
- gradle 8.2.1
- PostgreSQL 15.4 (либо использовать образ Docker, в этом случае необходим либо Docker Desktop 4.25.1 (128006), либо Docker Engine и Docker Compose)
- IDE

Алгоритм работы:
Приложение получает информацию о погоде в Минске от  API, по расписанию и  сохраняет ее в БД.
(Город по которому запрашивается погода Minsk).

Первая конечная точка возвращает информацию о текущей погоде - наиболее актуальную информацию, которая хранится в БД сервиса. В ответе содержится следующая информация:
1) Температура
2) Скорость ветра в mph
3) Атмосферное давление в mb
4) Влажность воздуха
5) Погодные условия (солнечно, облачно и т.д.)
6) Локация

Вторая конечная точка возвращает рассчитанную на основании имеющихся в сервисе данных информацию о средней температуре. Пользователь должен указать интересующий период. 

Третья конечная точка закрывает приложение.

Логи во время работы приложения будут сохраняться в файле ./mylog.log
======================================
Запуск приложения.
Вариант без Docker:
1) В предварительно установленной PostgreSQL(порт сервера оставляем по умолчанию) нужно запустить скрипт .\createDB\CREATE.sql, при этом у Вас должен быть пользователь "postgres" с паролем "java" (либо изменить пароль в файле .\src\main\resources\application.yml).
2) Запустить AppApplication.main() в IDE
Вариант с Docker:
1) Используя файл ./docker-compose.yaml, запустить контейнер Docker.
2) Запустить AppApplication.main() в IDE.
====================================
Варианты настройки приложения (для корректной работы приложения данные можно не изменять, информация предоставлена в ознакомительных целях).
файл с настройкой .\src\main\resources\application.yml
spring:
    datasource:
        url: jdbc:postgresql://localhost:5432/weather (указан порт сервера postgresql )
        username: postgres (если изменяете имя пользователя и/или пароль, убедитесь, что Вы будете иметь доступ к БД)
        password: java
place:
  id: 1
  locationName: Minsk (данные из таблицы place указывают на город, погоду которого будем мониторить)
HttpWebClient:
  header1: 1be3350cf0msh8d651554b7157c7p172623jsnbae0397cb54a (токен API "weatherapi-com.p.rapidapi.com" https://rapidapi.com/weatherapi/api/weatherapi-com, если Вы подписаны на данный API можно указать свой токен, данный токен имеет ограничение на количество запросов в единицу времени)
  header2: weatherapi-com.p.rapidapi.com (название сервиса, который предоставляет данные о погоде)
server:
  port: 8181 (порт на котором открыт сервер для запросов пользователя)
---------------------------------------------------------------------------
переменная FIXED_TIME класса Schedule  устанавливает периодичность запросов данных о погоде в мс (по умолчанию 600000 мс или 10 мин)
=========================================
Взаимодействие с конечными точками.
Рекомендуется использовать Postman.
Первая конечная точка
------------------------------------
###Get actual weather
' ' 'bash
curl -X GET http://localhost:8181/weather
' ' ' 
Метод GET, url http://localhost:8181/weather (порт по умолчанию)

Вторая конечная точка 
-----------------------------------
###Get average temp
' ' 'bash
curl -X POST -H "Content-Type: application/json" -d '{"from":"2023-12-19","to":"2023-12-19"}' http://localhost:8181/average 
или с экранированными кавычками для Windows
curl -X POST -H "Content-Type: application/json" -d "{\"from\":\"2023-12-19\",\"to\":\"2023-12-19\"}" http://localhost:8181/average
' ' '
Метод POST, url http://localhost:8181/average (порт по умолчанию)
Тело запроса:
{
“from”: “YYYY-MM-dd”,
“to”: “YYYY-MM-dd”
}

Трятья конечная точка
-----------------------------------
###shutdown
' ' 'bash
curl -X POST http://localhost:8181/actuator/shutdown
' ' '
Метод POST, url http://localhost:8181/actuator/shutdown (порт по умолчанию)
